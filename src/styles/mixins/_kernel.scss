@use "sass:math";
@use "../variables/variables" as variable;
@use "utilities" as utility;

// Rem output with px fallback
@mixin font-size($sizeValue: 16) {
	font-size: math.div($sizeValue, variable.$font__size_base) * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix($position: after) {
	&::#{$position} {
		content: "";
		display: table;
		table-layout: fixed;
		clear: both;
	}
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Clear link style
@mixin clear-link() {
	a {
		box-shadow: none;
		text-decoration: none;

		&:link,
		&:hover,
		&:focus,
		&:visited {
			color: inherit;
		}
	}
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get(variable.$columns, $numberColumns) - ((variable.$columns__margin * ($numberColumns - 1)) / $numberColumns);
}

@mixin filter-duotone {
	&::before {
		background: variable.$color__link;
		mix-blend-mode: screen;
		opacity: 0.1;
		z-index: 2;
	}

	&::after {
		background: variable.$color__link;
		mix-blend-mode: multiply;
		opacity: 0.8;
		z-index: 3;

		/* Browsers supporting mix-blend-mode don't need opacity < 1 */
		@supports (mix-blend-mode: multiply) {
			opacity: 1;
		}
	}
}

@mixin filter-grayscale {
	position: relative;
	filter: grayscale(100%);
	z-index: 1;

	&::after {
		display: block;
		width: 100%;
		height: 100%;
		z-index: 10;
	}
}

@mixin post-section-dash {
	&:before {
		background: currentColor;
		content: "\020";
		display: block;
		height: 2px;
		margin: variable.$size__spacing-unit 0;
		width: 1em;
	}
}

/* If we add the border using a regular CSS border, it won't look good on non-retina devices,
 * since its edges can look jagged due to lack of antialiasing. In this case, we are several
 * layers of box-shadow to add the border visually, which will render the border smoother. */

@mixin box-shadow($size) {
	box-shadow: 0 0 0 $size variable.$color__text-light inset,
		// Original border.
			0 0 0 ($size + 1px) variable.$color__text-light inset,
		// Antialiasing, inner edge.
			0 0 1px 0 rgba(variable.$color__text-light, 0.7); // Antialiasing, outer edge.
}

/* Calculates maximum width for post content */
@mixin postContentMaxWidth() {
	max-width: variable.$size__site-tablet-content;
	margin: auto;

	@include utility.media(desktop) {
		max-width: variable.$size__site-desktop-content;
	}
}

/* Nested sub-menu padding: 10 levels deep */
@mixin nestedSubMenuPadding() {
	ul {
		counter-reset: submenu;
	}

	ul > li > a::before {
		font-family: variable.$font__body;
		font-weight: normal;
		content: "\2013\00a0"counters(submenu, "\2013\00a0", none);
		counter-increment: submenu;
	}
}
